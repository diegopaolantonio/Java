package com.proyectoPaolantonio.proyectoPaolantonio.controllers;

import com.proyectoPaolantonio.proyectoPaolantonio.entities.Client;
import com.proyectoPaolantonio.proyectoPaolantonio.services.ClientsService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("api/v1/auth")
@Tag(name = "Paths for clients", description = "CRUD of clients")
public class ClientsController {

    @Autowired private ClientsService service;

    @Operation(summary = "Create a new client", description = "Create a new client with the data sent in the 'body', in data 'id' is autogenerated, 'docnumber' cannot be null and must be unique")
    @ApiResponses( value = {
            @ApiResponse(responseCode = "201", description = "Client created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))),
            @ApiResponse(responseCode = "400", description = "Bad request: typing error, 'docnumber' cannot be null or 'docnumber' already exists", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "", schema = @Schema()))
    })
    @PostMapping("/register")
    public ResponseEntity<Client> create(@RequestBody Client client) {
        try {
            return new ResponseEntity<>(service.save(client), HttpStatus.CREATED);
        } catch (DataIntegrityViolationException e) {
            Throwable cause = e.getCause();
            String errorMessage = "An error occurred";

            if (cause.getMessage().contains("not-null property")) {
                errorMessage = "Docnumber cannot be null";
            } else if (cause.getMessage().contains("Duplicate entry")) {
                errorMessage = "Docnumber already exists";
            } else {
                errorMessage = "Data integrity violation";
            }
            System.out.println(errorMessage);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @Operation(summary = "Get all clients", description = "Retrieves a list of all clients")
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "Client retrives successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "", schema = @Schema()))
    })
    @GetMapping
    public ResponseEntity<List<Client>> readAll() {
        try {
            List<Client> clients = service.readAll();
            return ResponseEntity.ok(clients);
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @Operation(summary = "Get one client", description = "Retrieves one client by its 'id'")
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "Client retrive successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))),
            @ApiResponse(responseCode = "404", description = "Client not found", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "", schema = @Schema()))
    })
    @GetMapping("/{clid}")
    public ResponseEntity<Object> readById(@PathVariable Long clid) {
        try {
            Optional<Client> client = service.readById(clid);
            if (client.isPresent()) {
                return ResponseEntity.ok(client.get());
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @Operation(summary = "Update one client", description = "Updates one client by its 'id' with the data sent in the 'body', in data 'id' cannot be modified, 'name, lastname and docnumber' cannot be modified to null and 'docnumber' must be unique")
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "Client updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))),
            @ApiResponse(responseCode = "400", description = "Bad request: typing error, 'docnumber' already exists", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "404", description = "Client not found", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "", schema = @Schema()))
    })
    @PatchMapping("/me")
    public ResponseEntity<Client> update(@RequestBody Client client) {
        try {
            Optional<Client> clientToUpdate = service.readById(client.getId());
            if(clientToUpdate.isPresent()) {
                Client updatedClient = clientToUpdate.get();
                if (client.getName() != null) {
                    updatedClient.setName(client.getName());
                }
                if (client.getLastname() != null) {
                    updatedClient.setLastname(client.getLastname());
                }
                if (client.getDocnumber() != null) {
                    updatedClient.setDocnumber(client.getDocnumber());
                }
                return ResponseEntity.ok(service.save(updatedClient));
            } else {
                return ResponseEntity.notFound().build();
            }
        }  catch (DataIntegrityViolationException e) {
            Throwable cause = e.getCause();
            String errorMessage = "An error occurred";

            if (cause.getMessage().contains("not-null property")) {
                errorMessage = "Docnumber cannot be null";
            } else if (cause.getMessage().contains("Duplicate entry")) {
                errorMessage = "Docnumber already exists";
            } else {
                errorMessage = "Data integrity violation";
            }
            System.out.println(errorMessage);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        } catch(Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @Operation(summary = "Remove one client", description = "Remove one client by its 'id'")
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "Client deleted successfully", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "404", description = "Client not found", content = @Content(mediaType = "", schema = @Schema())),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "", schema = @Schema()))
    })
    @DeleteMapping("/{clid}")
    public ResponseEntity<Map<String, Boolean>> remove(@PathVariable Long clid) {
        try {
            Optional<Client> clientToDelete = service.readById(clid);
            if(clientToDelete.isPresent()) {
                service.delete(clid);
                return ResponseEntity.ok().build();
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }


}
